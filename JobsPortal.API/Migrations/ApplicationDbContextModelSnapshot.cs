// <auto-generated />
using System;
using JobsPortal.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobsPortal.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JobsPortal.API.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.EmployerCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployerCompany", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<int>("NumberVacancies")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppliedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobSeekerId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobApplication", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AdminId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployerCompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("EmployerCompanyId");

                    b.ToTable("JobDetails", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobSeeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<int>("DesiredRole")
                        .HasColumnType("int");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobSeeker", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.Resume", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Resume", (string)null);
                });

            modelBuilder.Entity("JobsPortal.API.Models.Admin", b =>
                {
                    b.OwnsOne("JobsPortal.API.Models.User", "AdminUser", b1 =>
                        {
                            b1.Property<int>("AdminId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<int>("UserType")
                                .HasColumnType("int");

                            b1.HasKey("AdminId");

                            b1.ToTable("Admin");

                            b1.WithOwner()
                                .HasForeignKey("AdminId");
                        });

                    b.Navigation("AdminUser")
                        .IsRequired();
                });

            modelBuilder.Entity("JobsPortal.API.Models.EmployerCompany", b =>
                {
                    b.OwnsOne("JobsPortal.API.Models.User", "EmployerCompanyUser", b1 =>
                        {
                            b1.Property<int>("EmployerCompanyId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<int>("UserType")
                                .HasColumnType("int");

                            b1.HasKey("EmployerCompanyId");

                            b1.ToTable("EmployerCompany");

                            b1.WithOwner()
                                .HasForeignKey("EmployerCompanyId");
                        });

                    b.Navigation("EmployerCompanyUser")
                        .IsRequired();
                });

            modelBuilder.Entity("JobsPortal.API.Models.Job", b =>
                {
                    b.HasOne("JobsPortal.API.Models.Admin", "Admin")
                        .WithMany("Jobs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobApplication", b =>
                {
                    b.HasOne("JobsPortal.API.Models.Job", "Job")
                        .WithMany("JobAppications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsPortal.API.Models.JobSeeker", "JobSeeker")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobDetails", b =>
                {
                    b.HasOne("JobsPortal.API.Models.Admin", "Admin")
                        .WithMany("JobDetails")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsPortal.API.Models.EmployerCompany", "EmployerCompany")
                        .WithMany("JobDetails")
                        .HasForeignKey("EmployerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("EmployerCompany");
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobSeeker", b =>
                {
                    b.OwnsOne("JobsPortal.API.Models.User", "JobSeekerUser", b1 =>
                        {
                            b1.Property<int>("JobSeekerId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<int>("UserType")
                                .HasColumnType("int");

                            b1.HasKey("JobSeekerId");

                            b1.ToTable("JobSeeker");

                            b1.WithOwner()
                                .HasForeignKey("JobSeekerId");
                        });

                    b.Navigation("JobSeekerUser")
                        .IsRequired();
                });

            modelBuilder.Entity("JobsPortal.API.Models.Resume", b =>
                {
                    b.HasOne("JobsPortal.API.Models.Admin", "Admin")
                        .WithMany("Resumes")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobsPortal.API.Models.JobSeeker", "JobSeeker")
                        .WithOne("Resume")
                        .HasForeignKey("JobsPortal.API.Models.Resume", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobsPortal.API.Models.Admin", b =>
                {
                    b.Navigation("JobDetails");

                    b.Navigation("Jobs");

                    b.Navigation("Resumes");
                });

            modelBuilder.Entity("JobsPortal.API.Models.EmployerCompany", b =>
                {
                    b.Navigation("JobDetails");
                });

            modelBuilder.Entity("JobsPortal.API.Models.Job", b =>
                {
                    b.Navigation("JobAppications");
                });

            modelBuilder.Entity("JobsPortal.API.Models.JobSeeker", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("Resume");
                });
#pragma warning restore 612, 618
        }
    }
}
